[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
dependencies = [
  'pytz',
  'joblib',
  'pydantic',
  'requests',
  'tzlocal',
  'openai',
  'pyyaml',
  'transformers',
  'accelerate',
  # 'flash-attn', Needed only for training?
]
# You will need pytorch too for running against phi3
# pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

name = "conference-llm-tools"
dynamic = ["version"]
description = 'Tools to work with conferences in indico with LLMs as an assistant'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Gordon Watts", email = "gwatts@uw.edu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
[project.urls]
Documentation = "https://github.com/gordonwatts/abstract-ranker#readme"
Issues = "https://github.com/gordonwatts/abstract-ranker/issues"
Source = "https://github.com/gordonwatts/abstract-ranker"

[tool.hatch.build.targets.wheel]
packages = ["abstract_ranker"]

[project.optional-dependencies]
test = ["pytest", "black", "flake8"]

[tool.hatch.envs.dev.scripts]
check = "mypy --install-types --non-interactive {args:abstract_ranker tests}"
test = "pytest {args:tests}"
format = "black {args:abstract_ranker tests}"
lint = "flake8 {args:abstract_ranker tests}"

[tool.hatch.version]
path = "abstract_ranker/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:abstract_ranker tests}"

[tool.coverage.run]
source_pkgs = ["abstract_ranker", "tests"]
branch = true
parallel = true
omit = ["abstract_ranker/__about__.py"]

[tool.coverage.paths]
abstract_ranker = ["abstract_ranker", "*/abstract-ranker/abstract_ranker"]
tests = ["tests", "*/abstract-ranker/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
